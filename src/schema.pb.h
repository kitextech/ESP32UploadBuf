/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_SCHEMA_PB_H_INCLUDED
#define PB_SCHEMA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Wrapper_DataType {
    Wrapper_DataType_SPEED = 0,
    Wrapper_DataType_FORCE = 1,
    Wrapper_DataType_IMU = 2,
    Wrapper_DataType_POWER = 3,
    Wrapper_DataType_TEMPERATURE = 4,
    Wrapper_DataType_WIND = 5
} Wrapper_DataType;

/* Struct definitions */
typedef struct _Force {
    int64_t time;
    float force;
    int32_t id;
} Force;

typedef struct _Power {
    int64_t time;
    float current;
    float voltage;
} Power;

typedef struct _Quaternion {
    float x;
    float y;
    float z;
    float w;
} Quaternion;

typedef struct _Speed {
    int64_t time;
    float RPM;
} Speed;

typedef struct _Temperature {
    int64_t time;
    float temperature;
} Temperature;

typedef struct _Vector3 {
    float x;
    float y;
    float z;
} Vector3;

typedef struct _Wind {
    int64_t time;
    float speed;
    float direction;
} Wind;

typedef struct _Wrapper {
    Wrapper_DataType type;
    pb_callback_t data;
} Wrapper;

typedef struct _Imu {
    int64_t time;
    bool has_acc;
    Vector3 acc;
    bool has_gyro;
    Vector3 gyro;
    bool has_orientation;
    Quaternion orientation;
} Imu;


/* Helper constants for enums */
#define _Wrapper_DataType_MIN Wrapper_DataType_SPEED
#define _Wrapper_DataType_MAX Wrapper_DataType_WIND
#define _Wrapper_DataType_ARRAYSIZE ((Wrapper_DataType)(Wrapper_DataType_WIND+1))


/* Initializer values for message structs */
#define Wrapper_init_default                     {_Wrapper_DataType_MIN, {{NULL}, NULL}}
#define Speed_init_default                       {0, 0}
#define Force_init_default                       {0, 0, 0}
#define Power_init_default                       {0, 0, 0}
#define Imu_init_default                         {0, false, Vector3_init_default, false, Vector3_init_default, false, Quaternion_init_default}
#define Temperature_init_default                 {0, 0}
#define Wind_init_default                        {0, 0, 0}
#define Vector3_init_default                     {0, 0, 0}
#define Quaternion_init_default                  {0, 0, 0, 0}
#define Wrapper_init_zero                        {_Wrapper_DataType_MIN, {{NULL}, NULL}}
#define Speed_init_zero                          {0, 0}
#define Force_init_zero                          {0, 0, 0}
#define Power_init_zero                          {0, 0, 0}
#define Imu_init_zero                            {0, false, Vector3_init_zero, false, Vector3_init_zero, false, Quaternion_init_zero}
#define Temperature_init_zero                    {0, 0}
#define Wind_init_zero                           {0, 0, 0}
#define Vector3_init_zero                        {0, 0, 0}
#define Quaternion_init_zero                     {0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Force_time_tag                           1
#define Force_force_tag                          2
#define Force_id_tag                             3
#define Power_time_tag                           1
#define Power_current_tag                        2
#define Power_voltage_tag                        3
#define Quaternion_x_tag                         1
#define Quaternion_y_tag                         2
#define Quaternion_z_tag                         3
#define Quaternion_w_tag                         4
#define Speed_time_tag                           1
#define Speed_RPM_tag                            2
#define Temperature_time_tag                     1
#define Temperature_temperature_tag              2
#define Vector3_x_tag                            1
#define Vector3_y_tag                            2
#define Vector3_z_tag                            3
#define Wind_time_tag                            1
#define Wind_speed_tag                           2
#define Wind_direction_tag                       3
#define Wrapper_type_tag                         1
#define Wrapper_data_tag                         2
#define Imu_time_tag                             1
#define Imu_acc_tag                              2
#define Imu_gyro_tag                             3
#define Imu_orientation_tag                      4

/* Struct field encoding specification for nanopb */
#define Wrapper_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              2)
#define Wrapper_CALLBACK pb_default_field_callback
#define Wrapper_DEFAULT NULL

#define Speed_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    RPM,               2)
#define Speed_CALLBACK NULL
#define Speed_DEFAULT NULL

#define Force_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    force,             2) \
X(a, STATIC,   SINGULAR, INT32,    id,                3)
#define Force_CALLBACK NULL
#define Force_DEFAULT NULL

#define Power_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    current,           2) \
X(a, STATIC,   SINGULAR, FLOAT,    voltage,           3)
#define Power_CALLBACK NULL
#define Power_DEFAULT NULL

#define Imu_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    time,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  acc,               2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gyro,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,       4)
#define Imu_CALLBACK NULL
#define Imu_DEFAULT NULL
#define Imu_acc_MSGTYPE Vector3
#define Imu_gyro_MSGTYPE Vector3
#define Imu_orientation_MSGTYPE Quaternion

#define Temperature_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       2)
#define Temperature_CALLBACK NULL
#define Temperature_DEFAULT NULL

#define Wind_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    speed,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    direction,         3)
#define Wind_CALLBACK NULL
#define Wind_DEFAULT NULL

#define Vector3_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3)
#define Vector3_CALLBACK NULL
#define Vector3_DEFAULT NULL

#define Quaternion_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3) \
X(a, STATIC,   SINGULAR, FLOAT,    w,                 4)
#define Quaternion_CALLBACK NULL
#define Quaternion_DEFAULT NULL

extern const pb_msgdesc_t Wrapper_msg;
extern const pb_msgdesc_t Speed_msg;
extern const pb_msgdesc_t Force_msg;
extern const pb_msgdesc_t Power_msg;
extern const pb_msgdesc_t Imu_msg;
extern const pb_msgdesc_t Temperature_msg;
extern const pb_msgdesc_t Wind_msg;
extern const pb_msgdesc_t Vector3_msg;
extern const pb_msgdesc_t Quaternion_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Wrapper_fields &Wrapper_msg
#define Speed_fields &Speed_msg
#define Force_fields &Force_msg
#define Power_fields &Power_msg
#define Imu_fields &Imu_msg
#define Temperature_fields &Temperature_msg
#define Wind_fields &Wind_msg
#define Vector3_fields &Vector3_msg
#define Quaternion_fields &Quaternion_msg

/* Maximum encoded size of messages (where known) */
/* Wrapper_size depends on runtime parameters */
#define Speed_size                               16
#define Force_size                               27
#define Power_size                               21
#define Imu_size                                 67
#define Temperature_size                         16
#define Wind_size                                21
#define Vector3_size                             15
#define Quaternion_size                          20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
